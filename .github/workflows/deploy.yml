name: Deploy Bolamiga to AWS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Create deployment package
      run: |
        echo "üì¶ Creating deployment package..."
        zip -r bolamiga-deployment-${{ github.sha }}.zip . \
          -x "*.git*" "venv/*" "__pycache__/*" "*.log" "*.pid" "*.pem"
        
    - name: Upload to S3
      run: |
        echo "‚òÅÔ∏è Uploading to S3..."
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        aws s3 cp bolamiga-deployment-${{ github.sha }}.zip \
          s3://bolamiga-deployments/${TIMESTAMP}/bolamiga-${{ github.sha }}.zip
        
    - name: Deploy to AWS
      run: |
        echo "üöÄ Deploying to AWS..."
        chmod +x deploy.sh
        
        # Check if instance already exists
        EXISTING_INSTANCE=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=bolamiga" "Name=instance-state-name,Values=running" \
          --query 'Reservations[0].Instances[0].InstanceId' \
          --output text 2>/dev/null || echo "None")
        
        if [ "$EXISTING_INSTANCE" != "None" ] && [ "$EXISTING_INSTANCE" != "null" ]; then
          echo "üì± Found existing instance: $EXISTING_INSTANCE"
          
          # Get instance IP
          INSTANCE_IP=$(aws ec2 describe-instances \
            --instance-ids $EXISTING_INSTANCE \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          
          echo "‚úÖ Using existing deployment at $INSTANCE_IP"
          echo "‚ÑπÔ∏è  Note: Manual update required for latest changes"
          
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV
          echo "DEPLOYMENT_TYPE=existing" >> $GITHUB_ENV
        else
          echo "üÜï Creating new instance"
          ./deploy.sh
          
          # Extract IP from deploy.sh output
          INSTANCE_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=bolamiga" "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV
          echo "DEPLOYMENT_TYPE=new" >> $GITHUB_ENV
        fi
        
    - name: Wait for deployment
      run: |
        echo "‚è≥ Waiting for application to be ready..."
        sleep 60
        
    - name: Verify deployment
      run: |
        echo "üß™ Testing deployment at http://$INSTANCE_IP"
        
        # Test both direct port and nginx proxy
        for i in {1..10}; do
          if curl -f -s "http://$INSTANCE_IP" | grep -q "BOLAMIGA"; then
            echo "‚úÖ Application responding on port 80"
            break
          elif curl -f -s "http://$INSTANCE_IP:5030" | grep -q "BOLAMIGA"; then
            echo "‚úÖ Application responding on port 5030"
            break
          else
            echo "‚è≥ Attempt $i/10: Application not ready yet, waiting..."
            sleep 30
          fi
          
          if [ $i -eq 10 ]; then
            echo "‚ùå Application failed to respond after 10 attempts"
            exit 1
          fi
        done
        
        # Test API endpoints
        curl -f "http://$INSTANCE_IP/api/health" || curl -f "http://$INSTANCE_IP:5030/api/health"
        
        echo ""
        echo "üéâ Deployment successful!"
        echo "üéÆ Bolamiga Game URLs:"
        echo "   Production: http://$INSTANCE_IP"
        echo "   Direct:     http://$INSTANCE_IP:5030"
        echo "   API Health: http://$INSTANCE_IP/api/health"
        
    - name: Create GitHub Release
      if: env.DEPLOYMENT_TYPE == 'new'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Bolamiga Release v${{ github.run_number }}
        body: |
          üéÆ Bolamiga Retro Space Shooter Deployment
          
          **Deployment Details:**
          - Instance IP: ${{ env.INSTANCE_IP }}
          - Game URL: http://${{ env.INSTANCE_IP }}
          - Commit: ${{ github.sha }}
          - Deployed: ${{ github.event.head_commit.timestamp }}
          
          **Features:**
          - Blood Money-inspired side-scrolling shooter
          - Retro CRT effects and authentic Amiga aesthetics  
          - QA-compliant deployment with health monitoring
          - Persistent status bar with exports and logs
          
          **Access:**
          - Play at: http://${{ env.INSTANCE_IP }}
          - Health: http://${{ env.INSTANCE_IP }}/api/health
        draft: false
        prerelease: false